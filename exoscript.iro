name               = sample
file_extensions [] = sample;

styles [] {
   .comments    : style color = "light_green";
   .keywords    : style color = "light_blue";
   .conditionals: style color = "pink";
   
   .literals : style {
      color  = "orange";
      italic = "true";
   }

   .user_variables   : style color = "yellow"; 
   .game_variables   : style color = "gold";
   .operators   : style color = "red";
   .illegal     : style {
      color            = white
      background_color = red
   }
   
   .real_text : style color = "orange";
   .quoted_real_text : style {
      color  = "orange";
      italic = "true";
   }
}

contexts[] {

   realTextHighlighting : context {

         : pattern {
            uid         = uid_quoted_real_text
            regex       \= (\")([^\"]|\"\")*(\")
            styles []   = .quoted_real_text;
         }
         
         : pattern {
            uid         = uid_everything_else
            regex       \= (^((\")([^\"]|\"\")*(\")))
            styles []   = .real_text;
         } 
   }

   randoVariable : context {
         : pattern {
            uid         = uid_rando_variable
            regex       \= (\b([a-zA-Z_$]([a-zA-Z_$0-9])+)\b)
            styles []   = .game_variables;
         }
   }

   opsAndLiterals : context {
         // number and boolean literals {
         : pattern {
            uid         = uid_story_id
            regex       \= (\b(true|false|none|null)\b)
            styles []   = .literals;
         }
   
         // operators
         : pattern {
            regex       \= (&&|\+\+|\+|--|-|>!|!=|=|<|>|<=|>=|%|&|\?|:|\|\|)
            styles []   = .operators;
         }
   
         : pattern {
            regex       \= (\!)
            styles []   = .operators;
         }
   
   
         : pattern {
            regex       \= \b([0-9]+)\b
            styles []   = .literals;
         }
   }

   vars : context {
      : pattern {
         uid            = uid_scene_temporary_variables
         regex         \= (var_(.*?)(?=\]|\s))
         styles[]       = .user_variables;
      }
      
      : pattern {
         uid            = uid_single_game_variables
         regex         \= (mem_(.*?)(?=\]|\s))
         styles[]       = .user_variables;
      }
      
      : pattern {
         uid            = uid_all_game_groundhogs_day_variables
         regex         \= (hog_(.*?)(?=\]|\s))
         styles[]       = .user_variables;
      }
   }
   
   tildeProcessing : context {
      // The "~" check
      : inline_push {
         regex         \= (~)
         styles []      = .conditionals;
   
         : eol_pop {}

         // imperatives with a preceding ~ 
         : pattern {
            regex       \= (ifd|if|setif|set|call)
            styles []   = .keywords;
         }
         
         : include "main" ;
         : include "vars" ;
         : include "opsAndLiterals";
         : include "randoVariable";
      }
   }
   
   bracketProcessing : context {
   
      // conditionals (The "[...]" check)
      // Todo: the [They|He\She] check
      // Todo: the [if random : hunting feral dogs|trying to find some clean drinking water|looking for a working sparkplug]
   
      : inline_push {
         regex         \= (\[)
         styles []      = .conditionals;
   
         : pop {
            regex      \= (\])
            styles []   = .conditionals;
         }
   
         : include "main" ;
         : include "vars" ;
         : include "opsAndLiterals";
         : include "randoVariable";
   
         : pattern {
            regex       \= (and|call|else|end|elseif|if|ifd|or|random|set|setif)
            styles []   = .keywords;
         }
   
         // number and boolean literals {
         : pattern {
            regex       \= ([^(a-zA-Z)]\\d+|true|false|none|null|((\\+|-)\\d+))
            styles []   = .literals;
         }
      }
   
   }

   main : context {
   
      
   
      : pattern {
         uid         = uid_story_id
         regex       \= (^===\s)
         styles []   = .conditionals;            
      }
      
      //subchoice flow - any number of *'s!
      : pattern {
         uid         = uid_subchoice_flow
         regex       \= (\s\*+\s)
         styles []   = .conditionals;            
      }
   
   
      // comments
      : pattern {
         uid            = uid_single_line_comment
         regex         \= (====(=+))|(/\*(.*?)$|//(.*?)$|#(.*?))$
         styles[]       = .comments;
      }
      
      : include "tildeProcessing";
      : include "bracketProcessing";
      
      : include "realTextHighlighting";
   }
}
